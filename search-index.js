var searchIndex = {};
searchIndex['freqdist'] = {"items":[[0,"","freqdist","Implementation of a Frequency Distribution in Rust. Keeps track of how many\ntimes an object appears in a larger context (for example, how many times a \nword appears in a piece of text). The underlying data structure of the \nFrequency Distribution is a HashMap, so the object that is being counted\nmust be hashable.",null,null],[3,"FrequencyDistribution","","",null,null],[3,"NonZeroKeysIter","","Iterator over entries with non-zero quantities.",null,null],[11,"with_capacity_and_hash_state","","Creates a new FrequencyDistrbution with a hash state and size, where\nthe size is known or can be estimated.",0,{"inputs":[{"name":"frequencydistribution"},{"name":"usize"},{"name":"s"}],"output":{"name":"frequencydistribution"}}],[11,"with_hash_state","","Creates a new FrequencyDistribution with a hash state and default size.",0,{"inputs":[{"name":"frequencydistribution"},{"name":"s"}],"output":{"name":"frequencydistribution"}}],[11,"keys","","Iterator over the keys.",0,{"inputs":[{"name":"frequencydistribution"}],"output":{"name":"keys"}}],[11,"iter","","Iterator over the key, frequency pairs.",0,{"inputs":[{"name":"frequencydistribution"}],"output":{"name":"iter"}}],[11,"iter_non_zero","","Iterator over the non-zero frequency keys.",0,{"inputs":[{"name":"frequencydistribution"}],"output":{"name":"nonzerokeysiter"}}],[11,"sum_counts","","Sum of the total number of items counted thus far.",0,{"inputs":[{"name":"frequencydistribution"}],"output":{"name":"usize"}}],[11,"len","","Returns the number of entries in the distribution",0,{"inputs":[{"name":"frequencydistribution"}],"output":{"name":"usize"}}],[11,"get","","Gets the frequency in which the key occurs.",0,{"inputs":[{"name":"frequencydistribution"},{"name":"q"}],"output":{"name":"usize"}}],[11,"clear","","Clears the counts of all keys and clears all keys from\nthe distribution.",0,{"inputs":[{"name":"frequencydistribution"}],"output":null}],[11,"insert","","Updates the frequency of the value found with the key if it\nalready exists. Otherwise, inserts the key sizeo the hashmap, \nand sets its frequency to 1.",0,{"inputs":[{"name":"frequencydistribution"},{"name":"k"}],"output":null}],[11,"remove","","Removes an item and its associated counts.",0,{"inputs":[{"name":"frequencydistribution"},{"name":"q"}],"output":null}],[11,"new","","Creates a new FrequencyDistribution where the size of the\nHashMap is unknown.",0,{"inputs":[{"name":"frequencydistribution"}],"output":{"name":"frequencydistribution"}}],[11,"with_capacity","","Creates a new FrequencyDistribution where the size of the HashMap\nis known, or a estimate can be made.",0,{"inputs":[{"name":"frequencydistribution"},{"name":"usize"}],"output":{"name":"frequencydistribution"}}],[11,"default","","Creates a default FrequencyDistribution.",0,{"inputs":[{"name":"frequencydistribution"}],"output":{"name":"frequencydistribution"}}],[11,"from_iter","","Iterates through an iterator, and creates a new FrequencyDistribution from\nit. The iterator should be an iterator over keys and frequencies. If a \nupper bounded `size_hsize` is available, then it is used, otherwise the lower \nbounded `size_hsize` is used.",0,{"inputs":[{"name":"frequencydistribution"},{"name":"t"}],"output":{"name":"frequencydistribution"}}],[11,"extend","","Extends the hashmap by adding the keys or updating the frequencies of the keys.",0,{"inputs":[{"name":"frequencydistribution"},{"name":"t"}],"output":null}],[11,"into_iter","","Consumes the distribution, and creates an iterator over the\n(Key, Quantity: usize) pairs.",0,{"inputs":[{"name":"frequencydistribution"}],"output":{"name":"intoiter"}}],[11,"index","","",0,{"inputs":[{"name":"frequencydistribution"},{"name":"q"}],"output":{"name":"usize"}}],[11,"next","","",1,{"inputs":[{"name":"nonzerokeysiter"}],"output":{"name":"option"}}]],"paths":[[3,"FrequencyDistribution"],[3,"NonZeroKeysIter"]]};
initSearch(searchIndex);
